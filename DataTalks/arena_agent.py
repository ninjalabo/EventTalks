# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/04_arena_agent.ipynb.

# %% auto 0
__all__ = ['tool_route', 'tool_nearest_parking', 'tool_parking_status', 'ArenaBuddy']

# %% ../nbs/04_arena_agent.ipynb 1
"""
Arena-Buddy 🏒🤖
===============

The chat-first *eco-friendly* concierge that nudges fans towards
low-emission trips to Metro Areena Espoo.

Powered by Fast-MCP, the agent can:
* geocode places & plan routes (car / bike / walk / PT)
* show bike-&-ride / park-&-ride availability
* sprinkle in live weather + cheeky GIFs
"""

import asyncio, random, datetime as dt, httpx
from typing import Dict, Any, List

from mcp import agent, types as mt                 # Fast-MCP core

from DataTalks.api   import (
    geocode, osrm_car, osrm_walk, ors_bike, digitransit_pt,
    parking_status, Point,
)
from .arena import  nearest_parking_ids, facility_prediction
from .fastmcp_tools  import MCP           # tool-server helper
from .fastmcp_tools import arena_weather  # you may reuse tools



# %% ../nbs/04_arena_agent.ipynb 2
def _weather_card(weather: dict) -> dict:
    """Return a tiny genUI card for the current weather."""
    return {
        "type": "card.weather/v1",
        "props": {
            "icon":   weather["icon"],         # e.g. "sunny"
            "temp":   f"{weather['temp']:.0f} °C",
            "feels":  f"{weather['feels']:.0f} °C",
            "desc":   weather["desc"].title(),
            "time":   dt.datetime.utcnow().isoformat(timespec="minutes")+"Z"
        },
    }

def _gif_card(query: str) -> dict:
    """Return a funny GIF card (static URL for demo-purposes)."""
    gifs = {
        "bike":  "https://media.giphy.com/media/26BkNrGhy4DKnbD9u/giphy.gif",
        "walk":  "https://media.giphy.com/media/3o6Zt8zb1W44P4UAUE/giphy.gif",
        "metro": "https://media.giphy.com/media/xT8qBhmB5gJwFDyyRG/giphy.gif",
        "car":   "https://media.giphy.com/media/ICOgUNjpvO0PC/giphy.gif",
    }
    url = gifs.get(query, random.choice(list(gifs.values())))
    return {"type": "image/v1", "props": {"url": url, "alt": query}}


# %% ../nbs/04_arena_agent.ipynb 3
@MCP.tool("route.plan/v1",
          desc="Plan a route between two addresses. "
               "mode=walk|bike|car|pt (public transport).")
async def tool_route(origin: str, destination: str, mode: str="pt") -> dict:
    src = await geocode(origin)
    dst = await geocode(destination)

    match mode.lower():
        case "walk":
            rt = await osrm_walk(src, dst)
        case "bike":
            rt = await ors_bike(src, dst)
        case "car":
            rt = await osrm_car(src, dst)
        case _:
            rt = await digitransit_pt(src, dst)

    return rt.model_dump()

@MCP.tool("parking.nearest/v1",
          desc="Get nearest parking facility IDs for each vehicle type.")
async def tool_nearest_parking(lat: float, lon: float, radius_m: int=800) -> dict:
    return await nearest_parking_ids(lat, lon, radius_m=radius_m)

@MCP.tool("parking.status/v1",
          desc="Get live availability for a facility.")
async def tool_parking_status(fid: int) -> dict:
    return await parking_status(fid)


# %% ../nbs/04_arena_agent.ipynb 4
class ArenaBuddy(agent.Agent):
    """Conversational agent that gently nudges towards green transport."""

    name        = "arena-buddy"
    description = "Helps fans reach Metro Areena Espoo with minimal CO₂."

    async def decide(self, msg: mt.Message) -> mt.Message | mt.Stream:
        # -- very naïve policy: always answer synchronously -------------
        role, text = msg.role, msg.text
        if role != "user":
            return

        # Cheap intent detection
        low = text.lower()
        if "weather" in low:
            wx = await _demo_weather()          # stub below
            ui = [_weather_card(wx)]
            return mt.Message("assistant",
                              f"Here's the current weather at the Areena!",
                              ui=ui)

        if "bike" in low:
            ui = [_gif_card("bike")]
            return mt.Message("assistant",
                              "Biking is *always* a good idea – free cardio "
                              "and zero emissions! 🚴‍♀️",
                              ui=ui)

        # Default banter
        ui = [_gif_card("car")]
        return mt.Message("assistant",
                          "Ready to roll?  Tell me **from where** and I’ll "
                          "cook up a snag-free itinerary 🤖",
                          ui=ui)


# %% ../nbs/04_arena_agent.ipynb 5
MCP.mount(ArenaBuddy())          # registers under /chat/arena-buddy

