# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/04_arena_agent.ipynb.

# %% ../nbs/04_arena_agent.ipynb 1
#| eval: false
from __future__ import annotations

import json
import datetime, random
import html
import json
from typing import AsyncIterator, Callable
from fastapi import FastAPI, status, Form as ApiForm, HTTPException

from fasthtml.common import *
from monsterui.all import *
from sse_starlette import EventSourceResponse
from starlette.responses import HTMLResponse

from agents import Agent, Runner
from agents.mcp import MCPServerSse

import logging
from .camera_talk import parking_camera_loop

import asyncio
from dataclasses import dataclass
from datetime import datetime

from fasthtml.common import Div
from agents import RunHooks 

logging.basicConfig(level=logging.INFO)




# %% auto 0
__all__ = ['MCP_URL', 'OPENAI_API_KEY', 'LEAFLET_CSS', 'LEAFLET_JS', 'SESSIONS', 'history', 'COMMIT_COUNTER', 'TOOL_NAME_MAP',
           'parking_q', 'log', 'EventContext', 'app_html', 'app', 'MSG', 'MSG_LOCK', 'mainAgent_instruction',
           'MAX_IDLE', 'lifespan', 'nav_btn', 'home', 'format_tool_message', 'pretty_tool_name', 'ToolChatHook',
           'stream', 'send', 'empty_generator', 'open_map', 'parking_feed', 'emissions_summary', 'reap_sessions']

# %% ../nbs/04_arena_agent.ipynb 2
#| eval: false
# ── Config (env-vars for docker-compose) ───────────────────────────────────
MCP_URL        = os.getenv("MCP_URL", "https://tools:9001/sse")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")


# %% ../nbs/04_arena_agent.ipynb 3
#| eval: false
LEAFLET_CSS = "https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
LEAFLET_JS  = "https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"

# %% ../nbs/04_arena_agent.ipynb 4
#| eval: false
from typing import Dict, Any
SESSIONS: Dict[str, Dict[str, Any]] = {}

# %% ../nbs/04_arena_agent.ipynb 5
#| eval: false
_SENTINEL = object()


history: list[dict] = []
# Just for demo – use Redis/memcached for multi-instance
COMMIT_COUNTER = {"count": 0}
TOOL_NAME_MAP = {
    "route_car": "Car Route 🛻",
    "route_bike": "Bike Route 🚴",
    "route_walk": "Walking Route 🚶",
    "route_public_transport": "Public Transport 🚌",
    "weather_7_day_weather_forecast_for_coordinates": "Weather Forecast ☁️",
    "weather_current": "Live Weather 🌤️",
    "hockey.highlights.get_by_id": "Hockey Highlight 🏒",
}

#HAS_COMMITTED = {"done": False}


# %% ../nbs/04_arena_agent.ipynb 6
#| eval: false
parking_q: asyncio.Queue[str] = asyncio.Queue()
log = logging.getLogger(__name__)

# %% ../nbs/04_arena_agent.ipynb 7
#| eval: false
@dataclass
class EventContext:
    event_date_time: datetime
    event_title: str
    event_description: str

EventContext = EventContext(
    event_date_time=datetime.strptime("04.10.2025 12:00:00", "%d.%m.%Y %H:%M:%S"),
    event_title="Hockey match KIEKKO-ESPOO vs KÄRPÄT",
    event_description=(
        "Liiga regular-season showdown at Metro Areena • Doors open 11:15 "
        "Sustainable transport encouraged "
        "(metro: Urheilupuisto, bike racks outside Gate B)."
    )
)

# %% ../nbs/04_arena_agent.ipynb 8
#| eval: false
from contextlib import asynccontextmanager

@asynccontextmanager
async def lifespan(app: FastAPI):
    parking_task = asyncio.create_task(
        parking_camera_loop(parking_q, _sse), name="parking-loop")
    try:
        yield                       
    finally:
        parking_task.cancel()

# %% ../nbs/04_arena_agent.ipynb 9
#| eval: false
# ── FastHTML shell with Tailwind + HTMX + SSE ext ─────────────────────────
app_html = FastHTML(live=True,
    hdrs=Theme.zinc.headers() + [
        Script(src="https://cdn.tailwindcss.com"),

        # daisyUI (optional)
        Script(src="https://cdn.jsdelivr.net/npm/daisyui@4.10.2/dist/full.min.js"),

        # HTMX SSE extension (HTMX core auto-injected via live=True)
        Script(src="https://unpkg.com/htmx-ext-sse@2.2.3/dist/sse.js"),
        Script("""
          document.addEventListener("htmx:oobAfterSwap", (e) => {
  const el = e.detail.elt;                 // 👈 2025-style
  console.log("🔥 OOB swap done for:", el.id);
  if (el.id === "green-thanks") {
    el.classList.add("bg-green-100");
  }
});
        """),
        Script("""
  document.body.addEventListener("htmx:afterSwap", (e) => {
    if (e.detail.target.id === "chatlog") {
      const chatlog = document.getElementById("chatlog");
      if (chatlog) {
        chatlog.scrollTop = chatlog.scrollHeight;
      }
    }
  });
""")       

    ],  
    
    
    html_attrs={"data-theme": "dark", "class": "bg-gray-50 text-gray-700"},
)

# FastAPI wrapper so uvicorn can find the ASGI app
app = FastAPI(title="EventTalks", docs_url=None, lifespan=lifespan)
app.mount("/", app_html)


# %% ../nbs/04_arena_agent.ipynb 11
#| eval: false
# ── In-memory chat log ────────────────────────────────────────────────────
MSG: List[Dict[str, str]] = []
MSG_LOCK = asyncio.Lock()


# %% ../nbs/04_arena_agent.ipynb 12
#| eval: false
def _chat_bubble(idx: int, **hx):
    role, txt = MSG[idx]["role"], MSG[idx]["content"] or "…"
    side = "chat-end" if role == "user" else "chat-start"

    bubble_cls = (
        "bg-blue-100 text-blue-900" if role == "user"
        else "bg-gray-100 text-gray-900"
    )

    return Div(
        Div(role.capitalize(), cls="chat-header text-xs text-gray-400 mb-1"),
        Div(
            txt if role == "user" else html.unescape(txt),
            cls=f"{bubble_cls} p-3 rounded-xl shadow max-w-lg whitespace-pre-wrap",
            **hx
        ),
        cls=f"chat {side}",
        id=f"m{idx}"
    )


def _chat_input():
    return Input(
        id="msgin",                    
        name="msg",
        type="text",
        autocomplete="off",
        placeholder="Type your question…",
        cls="input input-bordered w-full",
        hx_swap_oob="true",             
        onkeyup="event.key==='Enter' && this.form.requestSubmit()",
    )



# %% ../nbs/04_arena_agent.ipynb 13
#| eval: false
# helper to avoid repetition
def nav_btn(emoji: str, label: str, msg: str) -> Button:
    return Button(
        Div(
            Span(emoji, cls="text-xl"),
            Span(label),
            cls="flex items-center justify-center gap-2 w-full"
        ),
        cls=(
            "btn btn-sm py-1 w-full rounded-md bg-base-200 hover:bg-base-400 "
            "items-center justify-center text-base-content"   
        ),
        hx_post="/send",
        hx_vals=f'{{"msg": "{msg}"}}',
        hx_target="#chatlog",
        hx_swap="beforeend"
    )



@app_html.get("/")
async def home():
    return Div(
        # ─── Wrapper: full layout ───
        Div(
            # ─── Sidebar ───
            Div(
                

                                Div(id="green-thanks", cls="mt-auto px-4 pb-6 text-center text-success font-semibold"),
                H1("EventTalks", cls="text-2xl font-bold px-4 py-6"),
                Div(
                    Div(
    nav_btn("🚲", "Bike Route", "How can I reach Metro Areena by bike?"),
    nav_btn("🚶", "Walk Route", "How can I walk to Metro Areena?"),
    nav_btn("🚌", "Public Transport", "What public transport can I take to the game?"),
    nav_btn("🏒", "Hockey Highlight", "Show me a hockey highlight"),
    cls="flex flex-col gap-1"
),
                    cls="flex flex-col gap-1"
                ),
                # 1️⃣  --- TOOL-LOG SECTION (BOTTOM) -------------------------
    Div(                            # pushes itself to the bottom
        Div(                       # the actual stream target
            id="tool-log",
            cls=(
                "overflow-y-auto max-h-48 "  # 12rem ≈ 192 px; tweak as you like
                "space-y-2 px-4 py-2 text-sm text-blue-800"
            ),
        ),
        cls=(
            "mt-auto w-full border-t border-base-300 "
            "bg-base-100 sticky bottom-0"   # always visible even if list long
        ),
    ),


                Div("Guest", cls="mt-auto px-4 pb-6 text-xs text-gray-500"),
                cls="w-64 bg-base-100 h-full border-r border-base-300 flex flex-col"
            ),

            # ─── Main Content ───
            Div(
                Div("EventTalks 🏒🌍",
                    cls="text-2xl font-bold text-center bg-white shadow px-4 py-4 sticky top-0 z-10"),

                Div(id="parking-bridge", cls="hidden",
                    hx_ext="sse",
                    sse_connect="/parking-feed",
                    sse_swap="message",
                    hx_target="#chatlog",
                    hx_swap="beforeend"),

                Div(
                    H2("Join the green wave to Metro Areena!",
                       cls="text-lg text-center text-gray-500 mb-4"),
                    Form(
                        Div(
                            H2("Let’s make a green wave! 🌱", cls="text-xl text-center font-semibold mb-2"),
                            H3("Wanna be greener?", cls="text-md text-center text-gray-600 mb-4"),
                            Button("YES! 💚",
                                   cls="btn btn-success w-full",
                                   hx_post="/emissions",
                                   hx_target="#chatlog",
                                   hx_swap="beforeend"),
                            cls="card bg-base-200 p-6 rounded-box shadow"
                        ),
                        method="post",
                        hx_trigger="submit",
                        cls="space-y-3"
                    ),
                    cls="max-w-md mx-auto px-6 py-4"
                ),

                Div(
    id="chatlog",
    #hx_target="#chatlog",                   # let htmx treat itself as the target
    hx_swap="beforeend show:bottom",        # swap and scroll to bottom
    cls="flex-1 overflow-y-auto px-6 py-4 space-y-3",
),

                Form(
                    Div(
                        Input(
                            id="msgin",
                            name="msg",
                            type="text",
                            autocomplete="off",
                            placeholder="Type your question…",
                            cls="input input-bordered flex-1 rounded-full px-4 text-base shadow-sm",
                            onkeyup="event.key==='Enter' && this.form.requestSubmit()"
                        ),
                        Button("↑", cls="btn btn-circle ml-2"),
                        cls="flex items-center bg-base-100 px-4 py-2 border-t border-base-300"
                    ),
                    cls="sticky bottom-0 z-10 bg-base-100",
                    hx_post="/send",
                    hx_target="#chatlog",
                    hx_swap="beforeend"
                ),
                cls="flex flex-col flex-1 h-full overflow-hidden"
            ),
            cls="flex h-screen w-screen overflow-hidden"
        )
    )







# %% ../nbs/04_arena_agent.ipynb 14
#| eval: false
_HKEY = os.environ["HOCKEY_KEY"]          # hockey_highlights tool
_RKEY = os.environ["GEOAPIFY_KEY"]        # still needed by the routing tools 🎟️

mainAgent_instruction = f"""
────────────────────────  EVENT CONTEXT  ────────────────────────
• **When**   : {{EventContext.event_date_time}}
• **What**   : {{EventContext.event_title}}
• **Details**: {{EventContext.event_description}}

──────────────────────  LOW-CARBON ROUTING  ─────────────────────
Goal → get the user to the event **on time with the lowest possible CO₂ footprint**.

Available tools – how each responds  
| tool                              | mode     | returns              |
|-----------------------------------|----------|----------------------|
| `route_car(start, finish)`        | drive    | **string** → Geoapify Static-Map URL |
| `route_bike(start, finish)`       | bicycle  | **string** → Geoapify Static-Map URL |
| `route_walk(start, finish)`       | walk     | **string** → Geoapify Static-Map URL |
| `route_public_transport(…)`       | transit  | **List[str]** → raw steps |

Pass **human-readable addresses or “lat,lon”**; each tool does its own geocoding.

─────────────────────  ROUTE RENDER RULES  ──────────────────────
After calling a routing tool:

### A. If the result is a **string** (map URL)
1. Embed the map:  
   ```html
   <img class="rounded-lg w-full" src="{{url}}" alt="Route map" loading="lazy">
Immediately parse the JSON array that follows in the same
response (it looks like ["Turn left… ➜ …", …]).

Post-process the array:
• split("➜") → (instruction, address)
• Skip rows where instruction.strip() == "None"
• Clean address → keep street + house-number only
(drop postcode, city, country)
Ilotulitustie 15, 00930 Helsinki, Finland ⇢ Ilotulitustie 15
• Collapse consecutive duplicates.

Render the remaining steps:

html
Copy
Edit
<ol class="list-decimal ms-6 space-y-1">
  <li><b>{{instruction}}</b> — {{clean_address}}</li>
  …
</ol>
B. If the result is a list (public-transport)
Apply the same post-processing & list rendering (steps only, no map).

C. Green-nudges
If the chosen tool is bike  or walk  →
end the card with an upbeat note in style “Great zero-carbon choice! 🌱”).

If it’s public transport  or car  →
add a brief funny suggestion to switch to greener route, especcially if weather is good (you have tool to find out weather).

────────────────────── HOCKEY-HIGHLIGHTS TOOL ────────────────────
If user ask for hockey highlights or smth similar:

Call Hockey-Highlights API with
subscription-key: {_HKEY} & any numeric id (e.g. 1, 2…).

From the JSON, extract title, imgUrl, embedUrl.

Show them after the routing card, e.g.:

html
Copy
Edit
<h3 class="text-lg font-bold mt-4">🏒 {{title}}</h3>
<a href="{{embedUrl}}" target="_blank">
  <img class="rounded-lg w-full" src="{{imgUrl}}" alt="{{title}}">
</a>

────────────────────────── STYLE GUIDE ─────────────────────────
• Wrap everything for each reply in one MonsterUI card:

html
Copy
Edit
<div class="card bg-base-300 text-base-100 shadow-lg p-4 space-y-3">
  …route content (map+list or list)…
  …green-nudge line…
  …hockey highlight block…
</div>
• Friendly, helpful; drop a light joke or emoji every few replies (PG-13).
"""





# %% ../nbs/04_arena_agent.ipynb 15
#| eval: false
async def _start_run(run_id: str, prompt_html: str):
    session = SESSIONS[run_id]                 #  dict laid out in /send
    chat_q  = session["chat_q"]
    tool_q  = session["tool_q"]
    any_tools = False

    def push_chat(html: str):
        chat_q.put_nowait(_sse("message", html))

    def push_tool(html: str):
        nonlocal any_tools
        any_tools = True                    # got at least one tool msg
        tool_q.put_nowait(_sse("message", html))

    async with MCPServerSse(name="ui", params={"url": MCP_URL},
                            client_session_timeout_seconds=300) as srv:
        agent = Agent(
            name         = "Main Agent",
            instructions = mainAgent_instruction,
            mcp_servers  = [srv],
            model        = "o4-mini",
        )
        hook = ToolChatHook(push_tool)
        res  = await Runner.run(agent, prompt_html, hooks=hook)

    push_chat(res.final_output or
              "<div class='text-sm text-gray-500'>✅ Task completed.</div>")
    # graceful closes
    chat_q.put_nowait(_sse("close", ""))
    if any_tools:
        tool_q.put_nowait(_sse("close",""))
        
    else:
        # still push a dummy "noop" then close so the client swaps once
        tool_q.put_nowait(_sse("message",""))   # empty swap does nothing
        tool_q.put_nowait(_sse("close",""))     # 👈 guarantees teardown
        
    session["closed_at"] = time.time()


# %% ../nbs/04_arena_agent.ipynb 16
#| eval: false
def format_tool_message(content: str, type_: str = "info") -> str:
    color = {
        "info": "bg-blue-100 text-blue-800",
        "success": "bg-green-100 text-green-800",
        "error": "bg-red-100 text-red-800"
    }.get(type_, "bg-gray-100 text-gray-800")
    
    return Div(
        content,
        cls=f"rounded p-2 text-sm {color} border-l-4 border-opacity-50 shadow-sm"
    ).__html__()


# %% ../nbs/04_arena_agent.ipynb 17
#| eval: false
def pretty_tool_name(name: str) -> str:
    return TOOL_NAME_MAP.get(name, name.replace("_", " ").title())


# %% ../nbs/04_arena_agent.ipynb 18
#| eval: false
from html import escape

class ToolChatHook(RunHooks[None]):
    def __init__(self, push_tool):
        self._push_tool = push_tool

    async def on_tool_start(self, ctx, agent, tool):
        self._push_tool(f"<div class='border-l-4 border-blue-500 pl-2'>"
                        f"🔧 {pretty_tool_name(tool.name)} started…</div>")

    async def on_tool_end(self, ctx, agent, tool, result):
        self._push_tool(f"<div class='border-l-4 border-green-500 pl-2'>"
                        f"✅ {pretty_tool_name(tool.name)} finished. ")
                        #f"{html.escape(str(result))}</div>")

    async def on_tool_error(self, ctx, agent, tool, err):
        self._push_tool(f"<div class='border-l-4 border-red-500 pl-2'>"
                        f"⚠️ {pretty_tool_name(tool.name)} failed: "
                        f"{html.escape(str(err))}</div>")





# %% ../nbs/04_arena_agent.ipynb 19
#| eval: false
@app_html.get("/stream/{channel}/{run_id}")
async def stream(channel: str, run_id: str):
    if run_id not in SESSIONS:
        async def empty():
            yield "event: close\ndata:\n\n"
        return EventSourceResponse(empty(), headers={"Content-Type": "text/event-stream"})
    
    
    session = SESSIONS[run_id]            # created in /send

    # start the background task exactly once
    if not session.get("started"):
        session["started"] = True
        asyncio.create_task(_start_run(run_id, session["prompt"]))

    chat_q, tool_q = session["chat_q"], session["tool_q"]

    q = chat_q if channel == "chat" else tool_q

    async def gen():
        while True:
            msg = await q.get()
            
            yield msg
            
            if isinstance(msg, dict) and msg.get("event") == "close":
                break
            

    headers = {
        "Cache-Control": "no-cache",
        "Content-Type": "text/event-stream",
        "X-Accel-Buffering": "no",
    }
    return EventSourceResponse(gen(), headers=headers, ping=15)


# %% ../nbs/04_arena_agent.ipynb 20
#| eval: false
from uuid import uuid4

@app_html.post("/send")
async def send(request: Request):
    form   = await request.form()
    prompt = str(form.get("msg", "")).strip()
    if not prompt:
        return HTMLResponse("", status_code=status.HTTP_204_NO_CONTENT)

    async with MSG_LOCK:
        MSG.extend([
            {"role": "user",      "content": html.escape(prompt)},
            {"role": "assistant", "content": ""},
        ])
        idx_user, idx_asst = len(MSG) - 2, len(MSG) - 1
        
        run_id = uuid4().hex
        
        
        
        
           # --- initialise queues & save the prompt -----------------------------
        SESSIONS[run_id] = {
               "chat_q":   asyncio.Queue(),
               "tool_q":   asyncio.Queue(),
               "prompt":   html.escape(prompt),
               "started":  False,                 # flag so we start the run once
           }

        return (
            _chat_bubble(idx_user).__html__() +
            _chat_bubble(
                idx_asst,
                hx_ext="sse",
                sse_connect=f"/stream/chat/{run_id}",
                sse_swap="message",
                sse_close="close",
                #hx_swap="beforeend show:bottom" 
                #hx_swap="outerHTML"
                hx_swap     = "innerHTML scroll:bottom"
            ).__html__() +
             Div(                       # hidden bridge element
            id         = f"tool-bridge-{run_id}",
            cls        = "hidden",
            hx_ext     = "sse",
            sse_connect= f"/stream/tools/{run_id}",
            sse_swap   = "message",
            sse_close   = "close",      
            hx_target  = "#tool-log",
            hx_swap    = "beforeend"
        ).__html__() +

            _chat_input().__html__()
        )







# %% ../nbs/04_arena_agent.ipynb 21
#| eval: false
def _sse(event: str, payload: str):
    """Return a dict Starlette understands as an SSE frame."""
    return {"event": event, "data": payload}






async def empty_generator():
    yield _sse("message", "⚠ Invalid message index")
    yield _sse("close", "")




                




# %% ../nbs/04_arena_agent.ipynb 22
#| eval: false
@app_html.post("/open-map")
async def open_map(
    # HTMX puts the value of `hx-vals` into the form as a *string*,
    # so accept it as str and deserialize ourselves.
    latlngs: str = ApiForm(...)
) -> HTMLResponse:
    """
    Render a small Leaflet preview.

    Parameters
    ----------
    latlngs : str (JSON)
        A JSON string that decodes to ``[[lat, lon], [lat, lon], …]``.

    Returns
    -------
    HTMLResponse
        A ready-to-open <dialog> card containing the map.
    """
    if isinstance(latlngs, str):
        coords = json.loads(latlngs)
    else:                       # HTMX/json-enc already gave us a list
        coords = latlngs
    assert all(isinstance(pt, list) and len(pt) == 2 for pt in coords)
    # -- 1️⃣ Validate & coerce ------------------------------------------------
    try:
        coords: List[List[float]] = json.loads(latlngs)
        assert (
            isinstance(coords, list)
            and all(isinstance(pt, list) and len(pt) == 2 for pt in coords)
        )
    except (json.JSONDecodeError, AssertionError, TypeError):
        # 400 instead of 500 makes the error obvious in the browser console
        raise HTTPException(status_code=400, detail="Bad latlngs payload")

    # -- 2️⃣ Build HTML -------------------------------------------------------
    coords_js = json.dumps(coords)  # safe to embed

    html = (
        Modal(
            ModalHeader("Route preview 🗺️"),
            ModalBody(
                "<div id='map' class='w-full h-80 rounded-xl'></div>",
                as_html=True,
            ),
            open=True,
        ).__html__()
                + f"""
        <link rel="stylesheet" href="{LEAFLET_CSS}"/>
        <script src="{LEAFLET_JS}"></script>
        <script>
          (function () {{
            const coords = {coords_js};
            const map = L.map('map', {{ zoomControl:false }}).fitBounds(coords);
            L.tileLayer('https://tile.openstreetmap.org/{{z}}/{{x}}/{{y}}.png',
                        {{ attribution:'© OpenStreetMap' }}).addTo(map);
            L.polyline(coords, {{ color:'#2563eb', weight:5 }}).addTo(map);
          }})();
        </script>
        """
    )

    return HTMLResponse(html, status_code=200, media_type="text/html")



# %% ../nbs/04_arena_agent.ipynb 23
#| eval: false
@app_html.get("/parking-feed")
async def parking_feed():
    async def streamer() -> AsyncIterator[dict]:
        while True:
            yield await parking_q.get()
    return EventSourceResponse(streamer(), ping=15)


# %% ../nbs/04_arena_agent.ipynb 24
#| eval: false
@app_html.post("/emissions")
async def emissions_summary(request: Request):
    COMMIT_COUNTER["count"] += random.randint(1, 20)
    count = COMMIT_COUNTER["count"]
    total_fans = 10_000
    co2_saved_kg = total_fans * 2.7
    tons = round(co2_saved_kg / 1000, 1)

    message = f"""
    <!-- Chat area: impact summary -->
    <div class="card bg-green-100 text-green-900 p-4 space-y-2"
         hx-swap-oob="beforeend:#chatlog">
        <h2 class="text-xl font-bold">💚 You're in!</h2>
        <p><b>{count:,}</b> fans joined the green wave 🌊</p>
        <p>If all {total_fans:,} went green...</p>
        <p>💨 We’d save <b>{tons} tons of CO₂</b> 🌳</p>
    </div>

    <!-- Sidebar thank you OOB -->
<div id="green-thanks"
     hx-swap-oob="outerHTML"
     class="inline-flex items-center justify-center gap-2
            bg-success text-success-content rounded-md px-3 py-2
            mx-auto">   <!-- mx-auto keeps it centred inside text-center -->
  ✅
  <span class="font-semibold text-sm
               bg-gradient-to-r from-lime-300 via-emerald-400 to-green-600
               bg-clip-text text-transparent">
      THANK&nbsp;YOU&nbsp;FOR&nbsp;BEING&nbsp;GREEN
  </span>
</div>
    <!-- Optional: remove form -->
    <script>
        document.querySelector('form')?.remove();
    </script>
    """

    return HTMLResponse(message)







# %% ../nbs/04_arena_agent.ipynb 25
#| eval: false
import time
MAX_IDLE = 300                       # seconds

async def reap_sessions():
    while True:
        await asyncio.sleep(60)
        now = time.time()
        for rid, sess in list(SESSIONS.items()):
            if sess.get("closed_at") and now - sess["closed_at"] > MAX_IDLE:
                SESSIONS.pop(rid, None)

@app_html.on_event("startup")
async def _launch_reaper():
    asyncio.create_task(reap_sessions())

