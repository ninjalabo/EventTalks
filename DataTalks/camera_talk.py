# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/08_camera_talk.ipynb.

# %% ../nbs/08_camera_talk.ipynb 1
#| eval: false
from __future__ import annotations

from collections import deque

import asyncio, datetime as dt, random, logging, os, contextlib


from agents import Agent, Runner
from agents.mcp import MCPServerSse         
from pathlib import Path
import base64          


log = logging.getLogger(__name__)

MCP_URL   = os.getenv("MCP_URL",   "http://tools:9001/sse")
CHART_MCP_URL  = os.getenv("CHART_MCP_URL", "http://chart:3000/sse")

LOCATION  = os.getenv("LOCATION", "Espoo,FI")   # city or "lat,lon"
HIST_LEN       = int(os.getenv("HIST_LEN", 20))

BIKE_IMG = Path(__file__).with_name("happy_bike.png")

_series: deque[int] = deque(maxlen=HIST_LEN)
_labels: deque[str] = deque(maxlen=HIST_LEN)

last_val = 20

# %% auto 0
__all__ = ['log', 'MCP_URL', 'CHART_MCP_URL', 'LOCATION', 'HIST_LEN', 'BIKE_IMG', 'last_val', 'ToolChatHook',
           'parking_camera_loop']

# %% ../nbs/08_camera_talk.ipynb 2
#| eval: false
from agents import RunHooks
import html

    
class ToolChatHook(RunHooks[None]):
    def __init__(self, push_tool):
        self._push_tool = push_tool

    async def on_tool_start(self, ctx, agent, tool):
        self._push_tool(f"<div class='border-l-4 border-blue-500 pl-2'>"
                        f"üîß {tool.name} started‚Ä¶</div>")

    async def on_tool_end(self, ctx, agent, tool, result):
        self._push_tool(f"<div class='border-l-4 border-green-500 pl-2'>"
                        f"‚úÖ {tool.name} finished. "
                        f"{html.escape(str(result))}</div>")

    async def on_tool_error(self, ctx, agent, tool, err):
        self._push_tool(f"<div class='border-l-4 border-red-500 pl-2'>"
                        f"‚ö†Ô∏è {tool.name} failed: "
                        f"{html.escape(str(err))}</div>")

# %% ../nbs/08_camera_talk.ipynb 3
#| eval: false
async def parking_camera_loop(q, sse_helper) -> None:
    """Send a Gen-UI block every 180 s with an updated chart."""
    global last_val                         # start full
    while True:
        delta      = random.randint(100, 120)  # random drop 30-50
        last_val   = max(last_val - delta, 0)
        stamp      = dt.datetime.now().strftime("%H:%M:%S")

        _series.append(last_val)
        _labels.append(stamp)

        try:
            ui_block = await asyncio.wait_for(
    _make_ui_block(
        list(_series), list(_labels), last_val, stamp,
        push_tool=lambda html: q.put_nowait(
            sse_helper("message",
                       f'<div hx-swap-oob="beforeend:#tool-log">{html}</div>')
        )
    ),
    timeout=180
)

        except Exception as exc:
                    log.error("parking widget failed: %s", exc, exc_info=True)
                    ui_block = (
                        f'<div hx-swap-oob="beforeend:#chatlog" '
                        f'class="alert alert-error">‚ö† parking widget error ‚Äì {exc}</div>'
                    )
        await q.put(sse_helper("message", ui_block))
        await asyncio.sleep(90)          # 3-min cadence

# %% ../nbs/08_camera_talk.ipynb 4
#| eval: false
import json
from typing import Callable
from agents import ImageGenerationTool
from openai.types.responses.tool import ImageGeneration
from agents import ModelSettings
from openai import AsyncOpenAI


async def _make_ui_block(series: list[int], labels: list[str], last_val, stamp, push_tool: Callable[[str], None]) -> str:
    """
    Generates a full GenUI HTML card via LLM using weather + parking.
    Ensures booking buttons and branding are always present.
    """
 

    chart_config = {
            "chartConfig": {
                "type": "line",
                "data": {
                    "labels": labels,
                    "datasets": [{
                        "label": "Free slots",
                        "data": series,
                        "borderColor": "#10b981",
                        "fill": False  # Python bool ‚Äì will be converted to JS-compatible false
                    }]
                },
                "options": {
                    "plugins": {
                        "title": {
                            "display": True,
                            "text": f"Parking last {len(series) * 3} min"
                        }
                    },
                    "scales": {
                        "y": {
                            "beginAtZero": True
                        }
                    }
                }
            },
            "width": 450,
            "height": 250,
            "devicePixelRatio": 2,
            "version": "4"
        }

        # Serialize to JSON with correct JS booleans
    chart_config_json = json.dumps(chart_config, indent=2)
    escaped_json = chart_config_json.replace("{", "{{").replace("}", "}}")
    async with MCPServerSse(name="ui", params={"url": MCP_URL}, client_session_timeout_seconds=300) as srv:

        instructions = f"""
        üé® You are EcoGen, a generative-UI designer.

        You will craft one complete MonsterUI/Tailwind card and stream it via HTMX exactly once.

        Inputs this run
        ‚Ä¢ üÖøÔ∏è  {last_val} free parking slots
        ‚Ä¢ üïí  Current time: {stamp}
        ‚Ä¢ üå§Ô∏è  Live weather for ‚Äú{LOCATION}‚Äù

        Step-by-step
        1. Call `weather.7_day_weather_forecast_for_coordinates` once.

        2.1. If Number of free parking slots > 0 : Call `chart.generate_chart` with the JSON below  
           (unchanged):

        ```json
        {escaped_json}
        ```
        2.2. If Number of free parking slots <= 0 : 
        Call your generate_image tool (it saves the JPEG src="/static/images/h_bike.jpg"):
python success = generate_image( prompt="Parking is fool, but cartoon bike riding happy to the stdium Metro Areena", n=1, size="1024x1024" )
 Then embed that file directly into this HTML snippet:
html <div class="mt-4 text-center"> <img src="/static/images/h_bike.jpg" alt="Full parking slots ‚Äì happy bike" style="max-width:100%; height:auto;" /> </div>
            

        3. Compose one HTML block wrapped in
        ```html
        <div hx-swap-oob="beforeend:#chatlog">
          ‚Ä¶full card‚Ä¶
        </div>
        ```

        It must contain, in order:
        ‚Ä¢ A fun heading with an emoji  
        ‚Ä¢ Weather summary and your funny comment  
        ‚Ä¢ Parking status line, e.g. `üöó {last_val} free slots`  
        ‚Ä¢ Chart or Image (from 2.)
        ‚Ä¢ A friendly encouragement paragraph to use bike or public transport  
        ‚Ä¢ Exactly three booking buttons, linking to:
          ‚Äì CityBikes(HSL) ‚Üí https://kaupunkipyorat.hsl.fi/en  
          ‚Äì Donkey Republic ‚Üí https://app.donkeyrepublic.com/#/reserve  
          ‚Äì ListNRide ‚Üí https://www.listnride.com/espoo  
          Use  
          `<div class="grid grid-cols-1 sm:grid-cols-3 gap-2 mt-4"> ‚Ä¶ </div>`

        ‚Ä¢ Branding footer:
        <div class="text-xs text-center text-gray-400 mt-3">
          Powered by EventTalks üèíüåç
        </div>

        Rules:
        ‚Ä¢ HTML only ‚Äì no Markdown, no JSON.  
        ‚Ä¢ Produce a single response; do not send drafts.  
        
        """
         
        
        agent = Agent(
            name="EcoGen Agent",
            model="o4-mini",
            mcp_servers=[srv],                         
            instructions=instructions,            
            
        )

        hook = ToolChatHook(push_tool)    
        
        res  = await Runner.run(agent, input="", hooks=hook)
        
        log.info("Agent UI raw output: %s", res.final_output)

        ui = res.final_output.strip()
        
        

    # Safety net: wrap if LLM forgot
    if "hx-swap-oob" not in ui:
        ui = f'<div hx-swap-oob="beforeend:#chatlog">{ui}</div>'

    # Safety net: inject buttons if missing
    if all(x not in ui for x in ["City Bikes", "Donkey Republic", "ListNRide"]):
        ui += """
        <div class="grid grid-cols-1 sm:grid-cols-3 gap-2 mt-4">
          <a href="https://kaupunkipyorat.hsl.fi/en" class="btn btn-success btn-sm">üö≤ City Bikes (HSL)</a>
          <a href="https://app.donkeyrepublic.com/#/reserve" class="btn btn-success btn-sm">ü¶Ñ Donkey Republic</a>
          <a href="https://www.listnride.com/espoo" class="btn btn-success btn-sm">üö¥ ListNRide</a>
        </div>
        """

    # Branding if missing
    if "EventTalks" not in ui:
        ui += '<div class="text-xs text-center text-gray-400 mt-3">Powered by EventTalks üèíüåç</div>'
    
    
 
    
    log.info("parking widget: %s", ui)
    return ui





