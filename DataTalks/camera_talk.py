# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/08_camera_talk.ipynb.

# %% auto 0
__all__ = ['start_parking_worker', 'parking_camera_loop']

# %% ../nbs/08_camera_talk.ipynb 1
#| eval: false
import asyncio
#from DataTalks.arena_agent import parking_camera_loop
from .fastmcp_tools import app
import datetime
import random
from .arena_agent import parking_q, _sse 
import logging


# %% ../nbs/08_camera_talk.ipynb 2
#| eval: false
@app.on_event("startup")
async def start_parking_worker():
    try:
        asyncio.create_task(parking_camera_loop(), name="parking-camera-loop") 
        logging.info("✅ Camera talks...")
    except Exception as exc:
        logging.error("❌ Could not run Camera Talks")  
        


# %% ../nbs/08_camera_talk.ipynb 3
#| eval: false
async def parking_camera_loop():
    """
    Periodically simulates new free-slot counts from a camera
    and pushes them into the parking_q as SSE blocks.
    """
    while True:
        free_slots_number = random.randint(0, 120)
        stamp = datetime.datetime.now().strftime("%H:%M:%S")

        # Make the text look like an assistant bubble
        # (e.g., "role: assistant" or just user-facing text)
        message_html = f"""
        <div class="chat chat-start">
          <div class="chat-header text-xs text-gray-500">assistant</div>
          <div class="chat-bubble bg-sky-700 text-white">
            Camera says: {free_slots_number} free slots now (at {stamp})!
          </div>
        </div>
        """
        # Put an SSE 'message' event into the queue
        sse_message = _sse("message", message_html)
        parking_q.put_nowait(sse_message)

        await asyncio.sleep(60)  
